<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE  mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper 클래스 경로 -->
<mapper namespace="kr.or.yi.teamProject.user.mapper.MemberMapper">

    <resultMap type="kr.or.yi.teamProject.user.dto.Member" id="memberMap">
        <id property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="emailConfirm" column="email_confirm"/>
        <result property="phone" column="phone"/>
        <result property="regDate" column="reg_date"/>
        <result property="withdrawalDate" column="withdrawal_date"/>
        <result property="social" column="social"/>
        <result property="tempPass" column="temp_pass"/>
        <result property="enabled" column="enabled"/>
        <collection property="authority" ofType="kr.or.yi.teamProject.user.dto.Auth">
            <result property="username" column="username"/>
            <result property="authority" column="authority"/>
        </collection>
    </resultMap>


    <select id="selectMember" parameterType="kr.or.yi.teamProject.user.dto.Member" resultMap="memberMap">
        SELECT mem.`username`, `password`, `name`, `email`, `email_confirm`, phone, reg_date, withdrawal_date, social, temp_pass, enabled, authority
        FROM `member` mem LEFT OUTER JOIN `auth` authority
                                             ON mem.`username` = authority.`username`
        WHERE 1 = 1
        <if test="username != null">
            AND mem.`username` = #{username}
        </if>
        <if test="email != null">
            AND mem.`email` = #{email}
        </if>
    </select>

    <insert id="insertSocialMember" parameterType="kr.or.yi.teamProject.user.dto.Member">
        <![CDATA[
            INSERT INTO `member` (`username`, `password`, `name`, `email`, `email_confirm`, `social`)
            VALUES (#{username}, #{password}, #{name}, #{email}, 1, 1)
        ]]>
    </insert>

    <insert id="insertNormalMember" parameterType="kr.or.yi.teamProject.user.dto.Member">
        <![CDATA[
        INSERT INTO `member` (`username`, `password`, `name`, `email`, `email_confirm`, `phone`, `social`)
        VALUES (#{username}, #{password}, #{name}, #{email}, 0, #{phone}, 0)
        ]]>
    </insert>

    <update id="updateMember" parameterType="kr.or.yi.teamProject.user.dto.Member">
        UPDATE `member`
        <set>
            <if test="emailConfirm != null">`email_confirm` = #{emailConfirm},</if>
            <if test="password != null">`password` = #{password},</if>
            <if test="email != null">`email` = #{email},</if>
            <if test="phone != null">`phone` = #{phone}</if>
        </set>
        WHERE `username` = #{username}
    </update>

    <select id="getInfoForPaging" parameterType="kr.or.yi.teamProject.user.dto.MemberPager"
            resultType="kr.or.yi.teamProject.user.dto.MemberPager">
        <![CDATA[
        SELECT `total_records`,
               `final_page_no`,
               `start_page`,
               if(@final_page > @end_page, @end_page, @final_page) `end_page`,
               @start_page - 1 `prev`,
               if(@final_page > @end_page, @end_page + 1, 0) `next`,
               (#{pageNo} - 1) * #{amount} `start_record`,
               #{amount} `amount`,
               #{pageNo} `page_no`,
               #{order} `order`,
               #{linkCount} `link_count`,
               #{name} `name`,
               #{username} `username`,
               #{email} `email`,
               #{social} `social`,
               #{confirm} `confirm`
        FROM (SELECT @total_recode := COUNT(*) `total_records`,
            @final_page := CEIL(COUNT(*) / #{amount}) `final_page_no`,
            @start_page := truncate(((#{pageNo} - 1) / #{linkCount}), 0) * #{linkCount} + 1 `start_page`,
            @end_page := truncate(((#{pageNo} - 1) / #{linkCount}), 0) * #{linkCount} + #{linkCount}
            FROM `member`
        ]]>
        <where>
            <if test="name != null and name != ''">
                `name` LIKE CONCAT('%', #{keyword}, '%')
            </if>
            <if test="username != null and username != ''">
                AND `username` LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="email != null and keyword != ''">
                AND `email` LIKE CONCAT('%', #{email}, '%')
            </if>
            <if test="social != null and social != ''">
                AND `social` = ${social}
            </if>
            <if test="confirm != null and confirm != ''">
                AND `email_confirm` = ${confirm}
            </if>
        </where>
        ) a
    </select>

    <select id="selectMemberListForManage" parameterType="kr.or.yi.teamProject.user.dto.MemberPager"
            resultMap="memberMap">
        SELECT mem.`username`, `password`, `name`, `email`, `email_confirm`, phone, reg_date, withdrawal_date, social, temp_pass, enabled, authority
        FROM `member` mem LEFT OUTER JOIN `auth` authority
        ON mem.`username` = authority.`username`
        <where>
            <if test="name != null and name != ''">
                `name` LIKE CONCAT('%', #{keyword}, '%')
            </if>
            <if test="username != null and username != ''">
                AND `username` LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="email != null and keyword != ''">
                AND `email` LIKE CONCAT('%', #{email}, '%')
            </if>
            <if test="social != null and social != ''">
                AND `social` = ${social}
            </if>
            <if test="confirm != null and confirm != ''">
                AND `email_confirm` = ${confirm}
            </if>
        </where>
        LIMIT #{startRecord}, #{amount}
    </select>

</mapper>